name: È¢ÑÂëäÁâá‰∏ãËΩΩ

on:
  workflow_dispatch:
    inputs:
      trailer_url:
        description: |
          „ÄêËæìÂÖ• Apple ÁîµÂΩ±È¢ÑÂëäÁâáÈìæÊé•„Äë
          ËØ∑ËÆøÈóÆ Apple ÁîµÂΩ±ÁîµËßÜÂÆòÁΩëÔºàhttps://tv.apple.com/ÔºâÔºåÈÄâÊã©ÊàñÊêúÁ¥¢ÂΩ±ÁâáÔºåÂ§çÂà∂ÊµèËßàÂô®Âú∞ÂùÄÊ†è‰∏≠ÁöÑÈìæÊé•Âπ∂Á≤òË¥¥Âà∞Ê≠§Â§Ñ„ÄÇüëáüèª
        required: true
      resolution:
        description: |
          „ÄêÈÄâÊã©ÂàÜËæ®Áéá„Äë
          Ëã• Apple Êú™Êèê‰æõ 4K ÂàÜËæ®ÁéáÔºåÂ∞ÜÈªòËÆ§‰∏∫ 1080pÔºõËã•Êèê‰æõÁöÑÊúÄÈ´òÂàÜËæ®Áéá‰Ωé‰∫é 1080pÔºå‰∏ãËΩΩ‰ªªÂä°Â∞ÜË¢´ÂèñÊ∂à„ÄÇ4K È¢ÑÂëäÁâáÊèê‰æõÊùúÊØîËßÜÁïå (Dolby Vision) ÂíåÊùúÊØîÂÖ®ÊôØÂ£∞ (Dolby Atmos)„ÄÇüëáüèª
        required: false
        type: choice
        options:
          - '1080p'
          - '4K'
      audio_language:
        description: |
          „ÄêÈÄâÊã©Â£∞Èü≥ËØ≠Ë®Ä„Äë
          Êèê‰æõ 10 ÁßçÂ£∞Èü≥ËØ≠Ë®ÄÂèØ‰æõÈÄâÊã©ÔºõËã• Apple Êú™Êèê‰æõÊâÄÈÄâËØ≠Ë®ÄÔºåÂàôÈªòËÆ§‰∏∫Ëã±ËØ≠„ÄÇüëáüèª
        required: false
        type: choice
        options:
          - 'üá∫üá∏ Ëã±ËØ≠'
          - 'üá©üá™ Âæ∑ËØ≠'
          - 'üá≤üáΩ Êãâ‰∏ÅÁæéÊ¥≤Ë•øÁè≠ÁâôËØ≠'
          - 'üá™üá∏ Ê¨ßÊ¥≤Ë•øÁè≠ÁâôËØ≠'
          - 'üá®üá¶ Âä†ÊãøÂ§ßÊ≥ïËØ≠'
          - 'üá´üá∑ Ê≥ïÂõΩÊ≥ïËØ≠'
          - 'üáÆüáπ ÊÑèÂ§ßÂà©ËØ≠'
          - 'üáØüáµ Êó•ËØ≠'
          - 'üáßüá∑ Â∑¥Ë•øËë°ËêÑÁâôËØ≠'
          - 'üá∑üá∫ ‰øÑËØ≠'
      subtitle_language:
        description: |
          „ÄêÈÄâÊã©Â≠óÂπïËØ≠Ë®Ä„Äë
          Êèê‰æõ 41 ÁßçÂ≠óÂπïËØ≠Ë®Ä„ÄÇÂ≠óÂπïÈªòËÆ§Â∞ÅË£ÖÂú®ËßÜÈ¢ë‰∏≠ÔºåÂèØÂú®Êí≠ÊîæÊó∂ÈÄâÊã©ÂºÄÂêØÊàñÂÖ≥Èó≠„ÄÇÂÆâÂçìËÆæÂ§áÂª∫ËÆÆ‰ΩøÁî® MX Player Âπ∂ÂêØÁî®ËΩØËß£Á†ÅÊí≠Êîæ„ÄÇËã• Apple Êú™Êèê‰æõÂ≠óÂπïÔºåÂàô‰∏ãËΩΩÁöÑÈ¢ÑÂëäÁâáÂ∞Ü‰∏çÂåÖÂê´Â≠óÂπï„ÄÇüëáüèª
        required: false
        type: choice
        options:
          - 'üá®üá≥ ‰∏≠ÊñáÁÆÄ‰Ωì'
          - 'üáπüáº ‰∏≠ÊñáÁπÅÈ´î'
          - 'üá≠üá∞ ‰∏≠ÊñáÁ≤§ËØ≠'
          - 'üá∫üá∏ Ëã±ËØ≠ English'
          - 'üá∏üá¶ ÈòøÊãâ‰ºØËØ≠ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
          - 'üáßüá¨ ‰øùÂä†Âà©‰∫öËØ≠ –±—ä–ª–≥–∞—Ä—Å–∫–∏'
          - 'üá®üáø Êç∑ÂÖãËØ≠ ƒåe≈°tina'
          - 'üá©üá∞ ‰∏πÈ∫¶ËØ≠ dansk'
          - 'üá©üá™ Âæ∑ËØ≠ Deutsch'
          - 'üá¨üá∑ Â∏åËÖäËØ≠ ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨'
          - 'üá≤üáΩ Ë•øÁè≠ÁâôËØ≠ÔºàÊãâ‰∏ÅÁæéÊ¥≤Ôºâ Espa√±ol (Latinoam√©rica)'
          - 'üá™üá∏ Ë•øÁè≠ÁâôËØ≠ÔºàË•øÁè≠ÁâôÔºâ Espa√±ol (Espa√±a)'
          - 'üá™üá™ Áà±Ê≤ôÂ∞º‰∫öËØ≠ eesti'
          - 'üá´üáÆ Ëä¨ÂÖ∞ËØ≠ Suomi'
          - 'üá®üá¶ Ê≥ïËØ≠ÔºàÂä†ÊãøÂ§ßÔºâ Fran√ßais (Canada)'
          - 'üá´üá∑ Ê≥ïËØ≠ÔºàÊ≥ïÂõΩÔºâ Fran√ßais (France)'
          - 'üáÆüá± Â∏å‰ºØÊù•ËØ≠ ◊¢◊ë◊®◊ô◊™'
          - 'üáÆüá≥ Âç∞Âú∞ËØ≠ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä'
          - 'üá≠üá∫ ÂåàÁâôÂà©ËØ≠ magyar'
          - 'üáÆüá© Âç∞Â∞ºËØ≠ Bahasa Indonesia'
          - 'üáÆüáπ ÊÑèÂ§ßÂà©ËØ≠ Italiano'
          - 'üáØüáµ Êó•ËØ≠ Êó•Êú¨Ë™û'
          - 'üá∞üá∑ Èü©ËØ≠ ÌïúÍµ≠Ïñ¥'
          - 'üá±üáπ Á´ãÈô∂ÂÆõËØ≠ lietuvi≈≥'
          - 'üá±üáª ÊãâËÑ±Áª¥‰∫öËØ≠ latvie≈°u'
          - 'üá≤üáæ È©¨Êù•ËØ≠ Bahasa Melayu'
          - 'üá≥üá± Ëç∑ÂÖ∞ËØ≠ Nederlands'
          - 'üá≥üá¥ Êå™Â®ÅËØ≠ norsk'
          - 'üáµüá± Ê≥¢ÂÖ∞ËØ≠ polski'
          - 'üáßüá∑ Ëë°ËêÑÁâôËØ≠ÔºàÂ∑¥Ë•øÔºâ Portugu√™s (Brasil)'
          - 'üáµüáπ Ëë°ËêÑÁâôËØ≠ Portugu√™s'
          - 'üá∑üá∫ ‰øÑËØ≠ –†—É—Å—Å–∫–∏–π'
          - 'üá∏üá∞ ÊñØÊ¥õ‰ºêÂÖãËØ≠ Slovenƒçina'
          - 'üá∏üáÆ ÊñØÊ¥õÊñáÂ∞º‰∫öËØ≠ sloven≈°ƒçina'
          - 'üá∏üá™ ÁëûÂÖ∏ËØ≠ Svenska'
          - 'üáÆüá≥ Ê≥∞Á±≥Â∞îËØ≠ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç'
          - 'üáÆüá≥ Ê≥∞Âç¢Âõ∫ËØ≠ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å'
          - 'üáπüá≠ Ê≥∞ËØ≠ ‡πÑ‡∏ó‡∏¢'
          - 'üáπüá∑ ÂúüËÄ≥ÂÖ∂ËØ≠ T√ºrk√ße'
          - 'üá∫üá¶ ‰πåÂÖãÂÖ∞ËØ≠ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞'
          - 'üáªüá≥ Ë∂äÂçóËØ≠ Ti·∫øng Vi·ªát'
      download_info: 
        description: |
          üçè ‰∏ãËΩΩÁöÑÈ¢ÑÂëäÁâáÂùáÊú™Áªè‰ªª‰ΩïÈáçÊñ∞ÁºñÁ†ÅÊàñÂéãÁº©ÔºåÁõ¥Êé•‰ªé Apple ÊúçÂä°Âô®Êã∑Ë¥ùÂéüÂßãÊµÅÊï∞ÊçÆÔºåÊ≤°Êúâ‰ªª‰ΩïË¥®ÈáèÊçüÂ§±„ÄÇ‰∏ãËΩΩÂÆåÊàêÂêéÔºåÊÇ®ÂèØ‰ª•Âú® GitHub Actions Â∑•‰ΩúÊµÅËøêË°åÁöÑ‚ÄúArtifacts‚ÄùÈÄâÈ°πÂç°‰∏≠ÊâæÂà∞‰∏ãËΩΩÁöÑÈ¢ÑÂëäÁâáÊñá‰ª∂„ÄÇ
        required: false 
        type: string 
      
jobs:
  download-apple-trailers:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download N_m3u8DL-CLI
      run: |
        Invoke-WebRequest -Uri https://github.com/nilaoda/N_m3u8DL-CLI/releases/download/3.0.2/N_m3u8DL-CLI_v3.0.2.exe -OutFile N_m3u8DL-CLI.exe
    
    - name: Download ffmpeg
      run: |
        Invoke-WebRequest -Uri https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip -OutFile ffmpeg-latest.zip
        Expand-Archive -Path ffmpeg-latest.zip -DestinationPath ffmpeg
        Move-Item ffmpeg/*/bin/ffmpeg.exe .
    
    - name: Process input URL
      run: |
        $trailerUrl = "${{ github.event.inputs.trailer_url }}"
        # Ëé∑ÂèñËæìÂÖ•ÈìæÊé•ÁöÑÊ∫ê‰ª£Á†Å
        $sourceCode = curl -s "$trailerUrl"
        
        # ÊèêÂèñÂåÖÂê´ m3u8 ÁöÑÂÆåÊï¥ HTML Á°¨ÁºñÁ†ÅÈìæÊé•
        $m3u8Links = ($sourceCode | Select-String -Pattern 'https.*?\.m3u8.*?"') `
                      -replace '&amp;', '&' `
                      -replace '.*content="(https.*?\.m3u8.*?)".*', '$1'
        
        # ÈÄâÊã©Á¨¨‰∏Ä‰∏™ÂåπÈÖçÈìæÊé•
        if ($m3u8Links.Length -gt 0) {
          $processedUrl = $m3u8Links[0]
        } else {
          throw "Êú™ÊâæÂà∞ÂåÖÂê´ m3u8 ÁöÑ HTML Á°¨ÁºñÁ†ÅÈìæÊé•ÔºÅ"
        }
        
        echo "Found m3u8 URL: $processedUrl"
        echo $processedUrl > input.txt
    
    - name: Parse M3U8 with N_m3u8DL-CLI
      if: ${{ github.event.inputs.trailer_url != '' }}
      run: |
        mkdir workdir
        .\N_m3u8DL-CLI.exe $(Get-Content input.txt) --enableParseOnly --workDir workdir
        dir workdir
        $timestamp = Get-ChildItem -Directory workdir | Select-Object -First 1 -ExpandProperty Name
        $rawM3u8File = "workdir\$timestamp\raw.m3u8"
        $masterM3u8File = "workdir\$timestamp\master.m3u8"
        $newM3u8File = "workdir\$timestamp\combined.m3u8"
    
        if (Test-Path $masterM3u8File) {
          echo "# Combined M3U8 file" > $newM3u8File
          Get-Content $masterM3u8File >> $newM3u8File
          echo "" >> $newM3u8File
          Get-Content $rawM3u8File >> $newM3u8File
        } else {
          Copy-Item $rawM3u8File $newM3u8File
        }
        echo "New M3U8 file created at $newM3u8File"
        Get-Content "workdir\$timestamp\combined.m3u8"

    - name: Process combined.m3u8 for Best Stream
      run: |
        # Á°ÆÂÆöËæìÂÖ•ÈÄâÊã©
        $subtitleLanguage = "${{ github.event.inputs.subtitle_language }}"
        $resolution = "${{ github.event.inputs.resolution }}"
        $audioLanguage = "${{ github.event.inputs.audio_language }}"
        $timestamp = Get-ChildItem -Directory workdir | Select-Object -First 1 -ExpandProperty Name
        $m3u8File = "workdir\$timestamp\combined.m3u8"

        # ËØªÂèñ M3U8 Êñá‰ª∂ÂÜÖÂÆπ
        $m3u8Content = Get-Content $m3u8File -Raw

        # ÂåπÈÖçÁâáÂêç
        $titleRegex = '#EXT-X-SESSION-DATA:DATA-ID="com.apple.hls.title",VALUE="([^"]+?)(?:\s+Trailer)?"'
        $titleMatch = [regex]::Match($m3u8Content, $titleRegex)

        if ($titleMatch.Success) {
          $movieTitle = $titleMatch.Groups[1].Value
          Write-Host "`e[32mExtracted Movie Title: $movieTitle`e[0m"
          echo "MOVIE_TITLE=$movieTitle" >> $env:GITHUB_ENV
        } else {
          Write-Host "`e[31mNo movie title found. Task cancelled.`e[0m"
          exit 1
        }

        # ÂÆö‰πâÊ≠£ÂàôË°®ËææÂºè
        $streamRegex = '#EXT-X-STREAM-INF:(.*?)\n(https?://[^\s]+)'
        $matches = [regex]::Matches($m3u8Content, $streamRegex, 'IgnoreCase, Multiline')

        # ÂàÜËæ®ÁéáËåÉÂõ¥
        if ($resolution -eq '1080p') {
          $minWidth = 1900
          $maxWidth = 2000
        } elseif ($resolution -eq '4K') {
          $minWidth = 3800
          $maxWidth = 4500
        }

        # Êü•ÊâæÊúÄ‰Ω≥ÊµÅ
        $bestStream = $null
        $maxBandwidth = 0
        $finalResolution = $resolution

        foreach ($match in $matches) {
          $streamInf = $match.Groups[1].Value
          $url = $match.Groups[2].Value

          $resolutionMatch = [regex]::Match($streamInf, 'RESOLUTION=(\d+)x(\d+)', 'IgnoreCase')
          $bandwidthMatch = [regex]::Match($streamInf, 'AVERAGE-BANDWIDTH=(\d+)', 'IgnoreCase')

          if ($resolutionMatch.Success -and $bandwidthMatch.Success) {
            $width = [int]$resolutionMatch.Groups[1].Value
            $averageBandwidth = [int]$bandwidthMatch.Groups[1].Value

            if ($width -ge $minWidth -and $width -le $maxWidth) {
              if ($averageBandwidth -gt $maxBandwidth) {
                $maxBandwidth = $averageBandwidth
                $bestStream = $url
              }
            }
          }
        }

        if (-not $bestStream -and $resolution -eq '4K') {
          Write-Host "`e[31mNo 4K stream found, falling back to 1080p.`e[0m"
          $minWidth = 1900
          $maxWidth = 2000
          $maxBandwidth = 0

          foreach ($match in $matches) {
            $streamInf = $match.Groups[1].Value
            $url = $match.Groups[2].Value

            $resolutionMatch = [regex]::Match($streamInf, 'RESOLUTION=(\d+)x(\d+)', 'IgnoreCase')
            $bandwidthMatch = [regex]::Match($streamInf, 'AVERAGE-BANDWIDTH=(\d+)', 'IgnoreCase')

            if ($resolutionMatch.Success -and $bandwidthMatch.Success) {
              $width = [int]$resolutionMatch.Groups[1].Value
              $averageBandwidth = [int]$bandwidthMatch.Groups[1].Value

              if ($width -ge $minWidth -and $width -le $maxWidth) {
                if ($averageBandwidth -gt $maxBandwidth) {
                  $maxBandwidth = $averageBandwidth
                  $bestStream = $url
                  $finalResolution = "1080p"
                }
              }
            }
          }
        }

        if (-not $bestStream) {
          Write-Host "`e[31mNo suitable stream found. Task cancelled.`e[0m"
          exit 1
        }

        Write-Host "`e[32mBest Stream URL: $bestStream`e[0m"
        echo "BEST_STREAM_URL=$bestStream" >> $env:GITHUB_ENV
        echo "FINAL_RESOLUTION=$finalResolution" >> $env:GITHUB_ENV

        # ‰∏ãËΩΩËßÜÈ¢ëÂπ∂ÂÜôÂÖ•ÁéØÂ¢ÉÂèòÈáè
        .\ffmpeg.exe -i "$bestStream" -c copy "AppleTrailer.mov" *>&1 | Tee-Object -FilePath ffmpeg_download.log -Append
        Write-Host "`e[32mDownloaded video file: AppleTrailer.mov`e[0m"
        echo "VIDEO_FILE=AppleTrailer.mov" >> $env:GITHUB_ENV

        # Ë∞ÉËØïÔºöÊâìÂç∞Áî®Êà∑ÈÄâÊã©ÁöÑËØ≠Ë®ÄÂÄº
        Write-Host "`e[32mUser Selected Audio Language: $audioLanguage`e[0m"
        # ÂÆö‰πâÈü≥È¢ëËØ≠Ë®ÄÊò†Â∞ÑË°®
        $languageMap = @{
          "üá∫üá∏ Ëã±ËØ≠" = "en"
          "üá©üá™ Âæ∑ËØ≠" = "de"
          "üá≤üáΩ Êãâ‰∏ÅÁæéÊ¥≤Ë•øÁè≠ÁâôËØ≠" = "es-419"
          "üá™üá∏ Ê¨ßÊ¥≤Ë•øÁè≠ÁâôËØ≠" = "es-ES"
          "üá®üá¶ Âä†ÊãøÂ§ßÊ≥ïËØ≠" = "fr-CA"
          "üá´üá∑ Ê≥ïÂõΩÊ≥ïËØ≠" = "fr-FR"
          "üáÆüáπ ÊÑèÂ§ßÂà©ËØ≠" = "it"
          "üáØüáµ Êó•ËØ≠" = "ja"
          "üáßüá∑ Â∑¥Ë•øËë°ËêÑÁâôËØ≠" = "pt-BR"
          "üá∑üá∫ ‰øÑËØ≠" = "ru"
        }
        
        # Á°ÆÂÆöÈü≥È¢ëËØ≠Ë®ÄÊ†áÁ≠æ
        $languageTag = $languageMap[$audioLanguage]
        # Ë∞ÉËØïÔºöÊâìÂç∞Â§ÑÁêÜÂêéÁöÑËØ≠Ë®ÄÊ†áÁ≠æÂÄº
        Write-Host "`e[32mProcessed Language Tag: $languageTag`e[0m"
        $bestAudioUrl = $null
        if ($finalResolution -eq '1080p') {
          # ÈªòËÆ§ÁöÑËã±ËØ≠Ê†áÁ≠æ
          $defaultAudioTag = "en"
          # ÂÆö‰πâÊ≠£ÂàôË°®ËææÂºè
          $audioRegex = "(https?://[^\s]+_audio_${languageTag}_gr160_.*?\.m3u8)"
          $audioRegexDefault = "(https?://[^\s]+_audio_${defaultAudioTag}_gr160_.*?\.m3u8)"
          $audioRegexOld = "(https?://[^\s]+_audio_en-US_gr160\.m3u8)"
          # ÂåπÈÖçÊâÄÊúâÈü≥È¢ëÈìæÊé• (Áî®Êà∑ÈÄâÊã©ÁöÑËØ≠Ë®Ä)
          $audioMatches = [regex]::Matches($m3u8Content, $audioRegex, 'IgnoreCase')
          # Â¶ÇÊûúÊú™ÊâæÂà∞Áî®Êà∑ÈÄâÊã©ÁöÑËØ≠Ë®ÄÔºåÂàôÂõûÈÄÄÂà∞ÈªòËÆ§ÁöÑËã±ËØ≠Èü≥È¢ë
          if ($audioMatches.Count -eq 0) {
            $audioMatches = [regex]::Matches($m3u8Content, $audioRegexDefault, 'IgnoreCase')
            # Â¶ÇÊûú‰ªçÊú™ÊâæÂà∞ÔºåÂàôÂ∞ùËØïÂåπÈÖçËÄÅÈ¢ÑÂëäÁâáÊ†ºÂºèÁöÑËã±ËØ≠Èü≥È¢ë
            if ($audioMatches.Count -eq 0) {
              $audioMatches = [regex]::Matches($m3u8Content, $audioRegexOld, 'IgnoreCase')
            }
          }
          # ÊèêÂèñÊúÄ‰Ω≥Èü≥È¢ëÈìæÊé•
          if ($audioMatches.Count -gt 0) {
            $bestAudioUrl = $audioMatches[0].Groups[1].Value
          }
          if ($bestAudioUrl) {
            Write-Host "`e[32mFound the best audio URL: $bestAudioUrl`e[0m"
            .\ffmpeg.exe -i $bestAudioUrl -c copy audio.m4a
            echo "AUDIO_FILE=audio.m4a" >> $env:GITHUB_ENV
            # Ë∞ÉËØïÔºöÊâìÂç∞‰∏ãËΩΩÂêéÁöÑÈü≥È¢ëÊñá‰ª∂
            Write-Host "`e[32mDownloaded Audio File: audio.m4a`e[0m"
          } else {
            Write-Host "`e[31mNo suitable audio stream found. Task cancelled.`e[0m"
            exit 1
          }
        } elseif ($finalResolution -eq '4K') {
          # ÈªòËÆ§ÁöÑËã±ËØ≠Ê†áÁ≠æ
          $defaultAudioTag = "en"
          # ÂÆö‰πâÊ≠£ÂàôË°®ËææÂºè
          $audioRegex = "(https?://[^\s]+_audio_${languageTag}_gr(\d+)_.*?\.m3u8)"
          $audioRegexDefault = "(https?://[^\s]+_audio_${defaultAudioTag}_gr(\d+)_.*?\.m3u8)"
          # ÂåπÈÖçÊâÄÊúâÈü≥È¢ëÈìæÊé• (Áî®Êà∑ÈÄâÊã©ÁöÑËØ≠Ë®Ä)
          $audioMatches = [regex]::Matches($m3u8Content, $audioRegex, 'IgnoreCase')
          # Â¶ÇÊûúÊú™ÊâæÂà∞Áî®Êà∑ÈÄâÊã©ÁöÑËØ≠Ë®ÄÔºåÂàôÂõûÈÄÄÂà∞ÈªòËÆ§ÁöÑËã±ËØ≠Èü≥È¢ë
          if ($audioMatches.Count -eq 0) {
            $audioMatches = [regex]::Matches($m3u8Content, $audioRegexDefault, 'IgnoreCase')
          }
          $maxGrValue = 0
          # ÊØîÂØπgrÊï∞ÂÄºÔºåÈÄâÊã©ÊúÄÂ§ßgrÂÄºÁöÑÈü≥È¢ëÈìæÊé•
          foreach ($match in $audioMatches) {
            $audioUrl = $match.Groups[1].Value
            $grValue = [int]$match.Groups[2].Value
            if ($grValue -gt $maxGrValue) {
              $maxGrValue = $grValue
              $bestAudioUrl = $audioUrl
            }
          }
          if ($bestAudioUrl) {
            Write-Host "`e[32mFound the best audio URL: $bestAudioUrl`e[0m"
            .\ffmpeg.exe -i $bestAudioUrl -c copy audio.ec3 *>&1 | Tee-Object -FilePath ffmpeg_download.log -Append
            echo "AUDIO_FILE=audio.ec3" >> $env:GITHUB_ENV
            echo "FFMPEG_LOG=ffmpeg_download.log" >> $env:GITHUB_ENV
            # Ë∞ÉËØïÔºöÊâìÂç∞‰∏ãËΩΩÂêéÁöÑÈü≥È¢ëÊñá‰ª∂
            Write-Host "`e[32mDownloaded Audio File: audio.ec3`e[0m"
          } else {
            Write-Host "`e[31mNo suitable audio stream found. Task cancelled.`e[0m"
            exit 1
          }
        }
        
        # Ë∞ÉËØïÔºöÊâìÂç∞Áî®Êà∑ÈÄâÊã©ÁöÑËØ≠Ë®ÄÂÄº
        Write-Host "`e[32mUser Selected Subtitle Language: $subtitleLanguage`e[0m"
        # ÂÆö‰πâÂ≠óÂπïËØ≠Ë®ÄÊò†Â∞ÑË°®
        $subtitleLanguageMap = @{
          "üá®üá≥ ‰∏≠ÊñáÁÆÄ‰Ωì" = "cmn-Hans"
          "üáπüáº ‰∏≠ÊñáÁπÅÈ´î" = "cmn-Hant"
          "üá≠üá∞ ‰∏≠ÊñáÁ≤§ËØ≠" = "yue-Hant"
          "üá∫üá∏ Ëã±ËØ≠ English" = "en"
          "üá∏üá¶ ÈòøÊãâ‰ºØËØ≠ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©" = "ar"
          "üáßüá¨ ‰øùÂä†Âà©‰∫öËØ≠ –±—ä–ª–≥–∞—Ä—Å–∫–∏" = "bg"
          "üá®üáø Êç∑ÂÖãËØ≠ ƒåe≈°tina" = "cs"
          "üá©üá∞ ‰∏πÈ∫¶ËØ≠ dansk" = "da"
          "üá©üá™ Âæ∑ËØ≠ Deutsch" = "de"
          "üá¨üá∑ Â∏åËÖäËØ≠ ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨" = "el"
          "üá≤üáΩ Ë•øÁè≠ÁâôËØ≠ÔºàÊãâ‰∏ÅÁæéÊ¥≤Ôºâ Espa√±ol (Latinoam√©rica)" = "es-419"
          "üá™üá∏ Ë•øÁè≠ÁâôËØ≠ÔºàË•øÁè≠ÁâôÔºâ Espa√±ol (Espa√±a)" = "es-ES"
          "üá™üá™ Áà±Ê≤ôÂ∞º‰∫öËØ≠ eesti" = "et"
          "üá´üáÆ Ëä¨ÂÖ∞ËØ≠ Suomi" = "fi"
          "üá®üá¶ Ê≥ïËØ≠ÔºàÂä†ÊãøÂ§ßÔºâ Fran√ßais (Canada)" = "fr-CA"
          "üá´üá∑ Ê≥ïËØ≠ÔºàÊ≥ïÂõΩÔºâ Fran√ßais (France)" = "fr-FR"
          "üáÆüá± Â∏å‰ºØÊù•ËØ≠ ◊¢◊ë◊®◊ô◊™" = "he"
          "üáÆüá≥ Âç∞Âú∞ËØ≠ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä" = "hi"
          "üá≠üá∫ ÂåàÁâôÂà©ËØ≠ magyar" = "hu"
          "üáÆüá© Âç∞Â∞ºËØ≠ Bahasa Indonesia" = "id"
          "üáÆüáπ ÊÑèÂ§ßÂà©ËØ≠ Italiano" = "it"
          "üáØüáµ Êó•ËØ≠ Êó•Êú¨Ë™û" = "ja"
          "üá∞üá∑ Èü©ËØ≠ ÌïúÍµ≠Ïñ¥" = "ko"
          "üá±üáπ Á´ãÈô∂ÂÆõËØ≠ lietuvi≈≥" = "lt"
          "üá±üáª ÊãâËÑ±Áª¥‰∫öËØ≠ latvie≈°u" = "lv"
          "üá≤üáæ È©¨Êù•ËØ≠ Bahasa Melayu" = "ms"
          "üá≥üá± Ëç∑ÂÖ∞ËØ≠ Nederlands" = "nl"
          "üá≥üá¥ Êå™Â®ÅËØ≠ norsk" = "no"
          "üáµüá± Ê≥¢ÂÖ∞ËØ≠ polski" = "pl"
          "üáßüá∑ Ëë°ËêÑÁâôËØ≠ÔºàÂ∑¥Ë•øÔºâ Portugu√™s (Brasil)" = "pt-BR"
          "üáµüáπ Ëë°ËêÑÁâôËØ≠ Portugu√™s" = "pt"
          "üá∑üá∫ ‰øÑËØ≠ –†—É—Å—Å–∫–∏–π" = "ru"
          "üá∏üá∞ ÊñØÊ¥õ‰ºêÂÖãËØ≠ Slovenƒçina" = "sk"
          "üá∏üáÆ ÊñØÊ¥õÊñáÂ∞º‰∫öËØ≠ sloven≈°ƒçina" = "sl"
          "üá∏üá™ ÁëûÂÖ∏ËØ≠ Svenska" = "sv"
          "üáÆüá≥ Ê≥∞Á±≥Â∞îËØ≠ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç" = "ta"
          "üáÆüá≥ Ê≥∞Âç¢Âõ∫ËØ≠ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å" = "te"
          "üáπüá≠ Ê≥∞ËØ≠ ‡πÑ‡∏ó‡∏¢" = "th"
          "üáπüá∑ ÂúüËÄ≥ÂÖ∂ËØ≠ T√ºrk√ße" = "tr"
          "üá∫üá¶ ‰πåÂÖãÂÖ∞ËØ≠ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞" = "uk"
          "üáªüá≥ Ë∂äÂçóËØ≠ Ti·∫øng Vi·ªát" = "vi"
        }
          
        
        # Á°ÆÂÆöÂ≠óÂπïËØ≠Ë®ÄÊ†áÁ≠æ
        $subtitleTag = $subtitleLanguageMap[$subtitleLanguage]
        # Ë∞ÉËØïÔºöÊâìÂç∞Â§ÑÁêÜÂêéÁöÑËØ≠Ë®ÄÊ†áÁ≠æÂÄº
        Write-Host "`e[32mProcessed Subtitle Tag: $subtitleTag`e[0m"

        $bestSubtitleUrl = $null

        # ÂÆö‰πâÊ≠£ÂàôË°®ËææÂºè
        $subtitleRegex = "(https?://[^\s]+_${subtitleTag}_subtitles_.*?\.m3u8)"

        # ÂåπÈÖçÊâÄÊúâÂ≠óÂπïÈìæÊé• (Áî®Êà∑ÈÄâÊã©ÁöÑËØ≠Ë®Ä)
        $subtitleMatches = [regex]::Matches($m3u8Content, $subtitleRegex, 'IgnoreCase')

        # ÊèêÂèñÊúÄ‰Ω≥Â≠óÂπïÈìæÊé•
        if ($subtitleMatches.Count -gt 0) {
          $bestSubtitleUrl = $subtitleMatches[0].Groups[1].Value
        }

        if ($bestSubtitleUrl) {
          Write-Host "`e[32mFound the best subtitle URL: $bestSubtitleUrl`e[0m"
          .\ffmpeg.exe -i $bestSubtitleUrl -c copy subtitles.vtt
          .\ffmpeg.exe -i subtitles.vtt subtitles.srt
          Remove-Item subtitles.vtt
          Write-Host "`e[32mÂ≠óÂπï‰∏ãËΩΩÂπ∂ËΩ¨Êç¢ÂÆåÊàêÔºåËæìÂá∫Êñá‰ª∂Ôºösubtitles.srt`e[0m"
          echo "SUBTITLE_FILE=subtitles.srt" >> $env:GITHUB_ENV
        } else {
          Write-Host "`e[31mNo suitable subtitle stream found. Skipping subtitles.`e[0m"
        }

        # ËßÜÈ¢ë„ÄÅÈü≥È¢ëÂíåÂ≠óÂπïÊ∑∑ÊµÅÂ∞ÅË£ÖÂπ∂ÂëΩÂêç
        $videoFileName = "$movieTitle-$finalResolution-AppleTrailer"
        if ($finalResolution -eq "1080p") {
          $audioFile = "audio.m4a"
        } elseif ($finalResolution -eq "4K") {
          $audioFile = "audio.ec3"
        }
          
        if (Test-Path "subtitles.srt") {
          Write-Host "Â∞ÅË£ÖËßÜÈ¢ë„ÄÅÈü≥È¢ëÂíåÂ≠óÂπïËá≥ MKV"
          .\ffmpeg.exe -i AppleTrailer.mov -i $audioFile -i subtitles.srt -c copy "${videoFileName}.mkv"
          Write-Host "`e[32mÊ∑∑ÊµÅÂ∞ÅË£ÖÂÆåÊàêÔºåËæìÂá∫Êñá‰ª∂Ôºö ${videoFileName}.mkv`e[0m"
          echo "OUTPUT_FILE=${videoFileName}.mkv" >> $env:GITHUB_ENV
        } else {
          Write-Host "Â∞ÅË£ÖËßÜÈ¢ëÂíåÈü≥È¢ëËá≥ MOVÔºàÊó†Â≠óÂπïÔºâ"
          .\ffmpeg.exe -i AppleTrailer.mov -i $audioFile -c copy "${videoFileName}.mov"
          Write-Host "`e[32mÊ∑∑ÊµÅÂ∞ÅË£ÖÂÆåÊàêÔºåËæìÂá∫Êñá‰ª∂: ${videoFileName}.mov`e[0m"
          echo "OUTPUT_FILE=${videoFileName}.mov" >> $env:GITHUB_ENV
        }

        # Á¨¨‰∫åÊ¨°ÊîπÂêçÈÄªËæë
        $outputFilePath = Get-Item "${videoFileName}.*"
        $outputFileName = $outputFilePath.Name
        $outputFileExtension = $outputFilePath.Extension

        # Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊîπÂêç
        if ($outputFileName -like "*4K*") {
          Write-Host "`e[33mFilename contains '4K'. Checking technical tags...`e[0m"

          # Ê£ÄÊü•Êó•Âøó‰∏≠ÊòØÂê¶ÂåÖÂê´ÊäÄÊúØÊÄßÊ†áÁ≠æ
          $logContent = Get-Content -Path ffmpeg_download.log -Raw
          $hasDolbyVision = $logContent -match "DOVI configuration"
          $hasDolbyAtmos = $logContent -match "Dolby Atmos"

          if ($hasDolbyVision -and $hasDolbyAtmos) {
            Write-Host "`e[32mBoth 'DolbyVision' and 'DolbyAtmos' tags found. Renaming file...`e[0m"

            # ÊûÑÈÄ†Êñ∞ÁöÑÊñá‰ª∂Âêç
            $newFileName = "$movieTitle-$finalResolution-AppleTrailer-DolbyVision-DolbyAtmos$outputFileExtension"
            $newFilePath = Join-Path -Path $outputFilePath.DirectoryName -ChildPath $newFileName

            # ÈáçÂëΩÂêçÊñá‰ª∂
            Rename-Item -Path $outputFilePath.FullName -NewName $newFileName
            Write-Host "`e[32mFile renamed to: $newFileName`e[0m"

            # ÂÜôÂÖ•ÁéØÂ¢ÉÂèòÈáè
            echo "RENAMED_FILE=$newFileName" >> $env:GITHUB_ENV
          } else {
            Write-Host "`e[33mTechnical tags not found. Keeping the original filename: $outputFileName`e[0m"
            echo "RENAMED_FILE=$outputFileName" >> $env:GITHUB_ENV
          }
        } else {
          Write-Host "`e[33mFilename does not contain '4K'. No renaming needed.`e[0m"
          echo "RENAMED_FILE=$outputFileName" >> $env:GITHUB_ENV
        }

        # ÊèêÂèñÊîπÂêçÂêéÁöÑÂêçÁß∞Ôºà‰∏çÂåÖÊã¨Êâ©Â±ïÂêçÔºâ
        if ($newFileName) {
          $renamedFileBase = [System.IO.Path]::GetFileNameWithoutExtension($newFileName)
        } else {
          # Êú™ÊîπÂêçÊó∂Ôºå‰ΩøÁî®ÂéüÂ∞ÅË£ÖËæìÂá∫Êñá‰ª∂Âêç‰Ωú‰∏∫Âü∫ÂáÜ
          $renamedFileBase = [System.IO.Path]::GetFileNameWithoutExtension($outputFileName)
        }
        Write-Host "`e[32mExtracted base name for renamed file: $renamedFileBase`e[0m"
        echo "RENAMED_FILE_BASE=$renamedFileBase" >> $env:GITHUB_ENV
    
    - name: Upload FFmpeg outputs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.RENAMED_FILE_BASE }}
        path: |
          ${{ env.RENAMED_FILE }}

    
   

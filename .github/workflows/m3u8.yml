name: Test N_m3u8DL-CLI

on:
  workflow_dispatch:
    inputs:
      trailer_url:
        description: '请输入视频链接（例如苹果预告片链接）'
        required: true
      resolution:
        description: '选择目标分辨率'
        required: true
        type: choice
        options:
          - '1080p'
          - '4K'

jobs:
  test-m3u8dl-cli:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download N_m3u8DL-CLI
      run: |
        Invoke-WebRequest -Uri https://github.com/nilaoda/N_m3u8DL-CLI/releases/download/3.0.2/N_m3u8DL-CLI_v3.0.2.exe -OutFile N_m3u8DL-CLI.exe

    - name: Download ffmpeg
      run: |
        Invoke-WebRequest -Uri https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip -OutFile ffmpeg-latest.zip
        Expand-Archive -Path ffmpeg-latest.zip -DestinationPath ffmpeg
        Move-Item ffmpeg/*/bin/ffmpeg.exe .

    - name: Process input URL
      run: |
        $trailerUrl = "${{ github.event.inputs.trailer_url }}"
        # 获取输入链接的源代码
        $sourceCode = curl -s "$trailerUrl"
        
        # 提取包含 m3u8 的完整 HTML 硬编码链接
        $m3u8Links = ($sourceCode | Select-String -Pattern 'https.*?\.m3u8.*?"') `
                      -replace '&amp;', '&' `
                      -replace '.*content="(https.*?\.m3u8.*?)".*', '$1'
        
        # 选择第一个匹配链接
        if ($m3u8Links.Length -gt 0) {
          $processedUrl = $m3u8Links[0]
        } else {
          throw "未找到包含 m3u8 的 HTML 硬编码链接！"
        }
        
        echo "Found m3u8 URL: $processedUrl"
        echo $processedUrl > input.txt

    - name: Test N_m3u8DL-CLI
      if: ${{ github.event.inputs.trailer_url != '' }}
      run: |
        mkdir workdir
        .\N_m3u8DL-CLI.exe $(Get-Content input.txt) --enableParseOnly --workDir workdir
        dir workdir

    - name: Process raw.m3u8 with FFmpeg
      run: |
        # 确定输入分辨率选项
        $resolution = "${{ github.event.inputs.resolution }}"
        $timestamp = Get-ChildItem -Directory workdir | Select-Object -First 1 -ExpandProperty Name
        $m3u8File = "workdir\$timestamp\raw.m3u8"

        # 提取 FFmpeg 输出信息
        $ffmpegInfo = .\ffmpeg.exe -i $m3u8File 2>&1

        # 初始化变量
        $regexLine = ""
        $regexUrl = ""

        # 分辨率逻辑分支
        if ($resolution -eq "1080p") {
          # 1080p 的逻辑
          $regexLine = "^\[hls.*Skip \('\#-- video_gr\d+\s+HD.*?avg:\s+\d+(\.\d+)?\s+Mbps max:.*?Mbps --'\)$"
          $regexUrl = "https.*video_.*gr(\d+).*\.m3u8"
        } elseif ($resolution -eq "4K") {
          # 4K 的逻辑
          $regexLine = "^\[hls.*Skip \('\#-- video_gr\d+\s+UHD.*?avg:\s+\d+(\.\d+)?\s+Mbps max:.*?Mbps --'\)$"
          $regexUrl = "https.*video_.*gr(\d+).*dovi.*\.m3u8"

          # 回退到不含 dovi 的模式
          if (-not ($ffmpegInfo | Select-String -Pattern "dovi")) {
            Write-Host "未找到 dovi 关键字，回退至标准 UHD 模式"
            $regexUrl = "https.*video_.*gr(\d+).*\.m3u8"
          }
        } else {
          throw "无效的分辨率选项：$resolution"
        }

        # 提取与正则匹配的所有行
        $matchedLines = $ffmpegInfo | Select-String -Pattern $regexLine
        if (-not $matchedLines) {
          throw "未找到符合条件的视频流信息！"
        }

        # 提取每行的第一个比特率值并比较
        $bestLine = $null
        $maxBitrate = 0
        foreach ($line in $matchedLines) {
          if ($line -match "avg:\s*(\d+(\.\d+)?)\s*Mbps") {
            $bitrate = [float]$matches[1]
            if ($bitrate -gt $maxBitrate) {
              $maxBitrate = $bitrate
              $bestLine = $line
            }
          }
        }

        if (-not $bestLine) {
          throw "无法确定最高比特率的视频流！"
        }

        # 提取最佳行的 gr 值
        if ($bestLine -match "gr(\d+)") {
          $grValue = $matches[1]
          Write-Host "找到的最佳 gr 值为: gr$grValue"
        } else {
          throw "无法从最佳行中提取 gr 值！"
        }

        # 匹配完整的视频子清单 URL
        $subPlaylistUrl = ($ffmpegInfo | Select-String -Pattern "$regexUrl" | ForEach-Object { $_.Matches.Value }) | 
                          Where-Object { $_ -match "gr$grValue" } | Select-Object -First 1
        if (-not $subPlaylistUrl) {
          throw "无法匹配到包含 gr$grValue 的子清单 URL！"
        }

        Write-Host "选择的子清单 URL: $subPlaylistUrl"

        # 提取最高质量音频逻辑
        $audioRegex = "https.*_audio_en_.*gr(\d+).*\.m3u8"
        $audioUrls = $ffmpegInfo | Select-String -Pattern $audioRegex | ForEach-Object { $_.Matches.Value }

        if (-not $audioUrls) {
          throw "未找到音频流链接！"
        }

        # 比较音频 gr 值，选取最大值
        $maxAudioGr = 0
        $bestAudioUrl = ""
        foreach ($url in $audioUrls) {
          if ($url -match "gr(\d+)") {
            $audioGr = [int]$matches[1]
            if ($audioGr -gt $maxAudioGr) {
              $maxAudioGr = $audioGr
              $bestAudioUrl = $url
            }
          }
        }

        if (-not $bestAudioUrl) {
          throw "无法确定最佳音频流链接！"
        }

        Write-Host "选择的最佳音频 URL: $bestAudioUrl"

        # 下载并保存视频流
        .\ffmpeg.exe -i $subPlaylistUrl -c copy video_${resolution}.mov

        # 下载并保存音频流
        .\ffmpeg.exe -i $bestAudioUrl -c copy audio.ec3

        Write-Host "下载完成，输出文件：video_${resolution}.mov 和 audio.ec3"
    
    - name: Upload FFmpeg outputs
      if: ${{ github.event.inputs.trailer_url != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-outputs
        path: |
          output_highest.mov
          saved_playlist.m3u8
          raw.m3u8

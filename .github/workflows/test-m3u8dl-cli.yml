name: Test N_m3u8DL-CLI

on:
  workflow_dispatch:
    inputs:
      trailer_url:
        description: '解析视频链接的可用流信息'
        required: false
      best_video_m3u8:
        description: '请输入最佳质量视频流的m3u8链接'
        required: false
      best_audio_m3u8:
        description: '请输入最佳音频流的m3u8链接'
        required: false
      subtitles_m3u8:
        description: '请输入字幕流的m3u8链接'
        required: false
      enable_download:
        description: '是否启用下载步骤'
        required: false
        type: choice
        options:
          - '关闭'
          - '启用'
      embed_subtitles:
        description: '是否封装字幕至视频中'
        required: false
        type: choice
        options:
          - '否'
          - '是'

jobs:
  test-m3u8dl-cli:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download N_m3u8DL-CLI
      run: |
        Invoke-WebRequest -Uri https://github.com/nilaoda/N_m3u8DL-CLI/releases/download/3.0.2/N_m3u8DL-CLI_v3.0.2.exe -OutFile N_m3u8DL-CLI.exe

    - name: Download ffmpeg
      run: |
        Invoke-WebRequest -Uri https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip -OutFile ffmpeg-latest.zip
        Expand-Archive -Path ffmpeg-latest.zip -DestinationPath ffmpeg
        Move-Item ffmpeg/*/bin/ffmpeg.exe .

    - name: Process input URL
      run: |
        $trailerUrl = "${{ github.event.inputs.trailer_url }}"
        $processedUrl = $trailerUrl -replace "amp;", ""
        echo $processedUrl > input.txt

    - name: Test N_m3u8DL-CLI
      if: ${{ github.event.inputs.trailer_url != '' }}
      run: |
        mkdir workdir
        .\N_m3u8DL-CLI.exe $(Get-Content input.txt) --enableParseOnly --workDir workdir
        dir workdir

    - name: Display raw.m3u8 content
      if: ${{ github.event.inputs.trailer_url != '' }}
      run: |
        $timestamp = Get-ChildItem -Directory workdir | Select-Object -First 1 -ExpandProperty Name 
        Get-Content "workdir\$timestamp\raw.m3u8"
    
    - name: Filter and Display Best Quality Links
      if: ${{ github.event.inputs.trailer_url != '' }}
      run: |
        $timestamp = Get-ChildItem -Directory workdir | Select-Object -First 1 -ExpandProperty Name
        $rawFilePath = "workdir\$timestamp\raw.m3u8"
        $rawFileContent = Get-Content $rawFilePath

        # 筛选最佳质量的视频流链接
        $videoLinks = $rawFileContent | Select-String -Pattern "https.*video.*gr\d+.*m3u8" | ForEach-Object { $_.Matches.Value }
        $bestVideoLink = $videoLinks | Sort-Object { [int]($_ -match "gr(\d+)" -as [bool] -and $matches[1]) } -Descending | Select-Object -First 1

        # 筛选最佳质量的音频流链接
        $audioLinks = $rawFileContent | Select-String -Pattern "https.*audio.*gr\d+.*m3u8" | ForEach-Object { $_.Matches.Value }
        $bestAudioLink = $audioLinks | Sort-Object { [int]($_ -match "gr(\d+)" -as [bool] -and $matches[1]) } -Descending | Select-Object -First 1

        echo "Best Video Stream URL: $bestVideoLink"
        echo "Best Audio Stream URL: $bestAudioLink"
    
    - name: Conditional download and merge
      if: ${{ github.event.inputs.enable_download == '启用' }}
      run: |
        $videoUrl = "${{ github.event.inputs.best_video_m3u8 }}"
        $audioUrl = "${{ github.event.inputs.best_audio_m3u8 }}"
        $subtitlesUrl = "${{ github.event.inputs.subtitles_m3u8 }}"
        $embedSubtitles = "${{ github.event.inputs.embed_subtitles }}"
        if ($videoUrl -ne "") {
          .\ffmpeg.exe -i $videoUrl -c copy video.mp4
        }
        if ($audioUrl -ne "") {
          .\ffmpeg.exe -i $audioUrl -c copy audio.m4a
        }
        if ($subtitlesUrl -ne "") {
          .\ffmpeg.exe -i $subtitlesUrl -c copy subtitles.vtt
          .\ffmpeg.exe -i subtitles.vtt subtitles.srt
          Remove-Item subtitles.vtt
        }
        if ($videoUrl -ne "" -and $audioUrl -ne "") {
          if ($embedSubtitles -eq '是' -and $subtitlesUrl -ne "") {
            .\ffmpeg.exe -i video.mp4 -i audio.m4a -i subtitles.srt -c copy final_output.mkv
          } else {
            .\ffmpeg.exe -i video.mp4 -i audio.m4a -c copy final_output.mp4
          }
          Remove-Item video.mp4, audio.m4a
        } elseif ($videoUrl -ne "" -and $embedSubtitles -eq '是' -and $subtitlesUrl -ne "") {
          .\ffmpeg.exe -i video.mp4 -i subtitles.srt -c copy final_output.mkv
          Remove-Item video.mp4
        }

    - name: Upload final output
      if: ${{ github.event.inputs.enable_download == '启用' }}
      run: |
        $videoUrl = "${{ github.event.inputs.best_video_m3u8 }}"
        $audioUrl = "${{ github.event.inputs.best_audio_m3u8 }}"
        $subtitlesUrl = "${{ github.event.inputs.subtitles_m3u8 }}"
        $embedSubtitles = "${{ github.event.inputs.embed_subtitles }}"
        if ($videoUrl -ne "" -and $audioUrl -ne "") {
          if ($embedSubtitles -eq '是' -and $subtitlesUrl -ne "") {
            echo "Uploading final_output.mkv"
            mv final_output.mkv output.mkv
          } else {
            echo "Uploading final_output.mp4"
            mv final_output.mp4 output.mp4
          }
        } elseif ($videoUrl -ne "") {
          if ($embedSubtitles -eq '是' -and $subtitlesUrl -ne "") {
            echo "Uploading final_output.mkv"
            mv final_output.mkv output.mkv
          } else {
            echo "Uploading video.mp4"
            mv video.mp4 output.mp4
          }
        } elseif ($audioUrl -ne "") {
          echo "Uploading audio.m4a"
          mv audio.m4a output.m4a
        }
        if ($subtitlesUrl -ne "" -and $embedSubtitles -ne '是') {
          echo "Uploading subtitles.srt"
          mv subtitles.srt subtitles.srt
        }

    - name: Upload output
      if: ${{ github.event.inputs.enable_download == '启用' }}
      uses: actions/upload-artifact@v4
      with:
        name: final_output
        path: output.*
      continue-on-error: true

    - name: Upload subtitles
      if: ${{ github.event.inputs.enable_download == '启用' && github.event.inputs.embed_subtitles == '否' }}
      uses: actions/upload-artifact@v4 
      with:
        name: subtitles 
        path: subtitles.srt 
      continue-on-error: true

    - name: Upload results 
      if: ${{ github.event.inputs.trailer_url != '' }} 
      uses: actions/upload-artifact@v4 
      with: 
        name: m3u8-results 
        path: workdir/*
